Юрий, здравствуйте. 
  Месяц занятий прошел незаметно, но достаточно плодотворно.

 Последнее задание. Реализовать  ЧПУ.
Я это сделал. Можете посмотреть на сайте 

http://www.mnudelman.16mb.com/php-2/articles

ЧПУ появляется при наведении на ссылки и переходах.

 Замечание по поводу кодировки степенью 10.
Заменил на степерь 2. Теперь список действий такой
Запрос: SELECT * FROM taskdoings
Результат-записей: 4
taskdoings - возможные действия над объектами
-------------------------------------
doingid 	doingname 	rang
-------------------------------------
1 		read 		1
-------------------------------------
2 		create 		2
-------------------------------------
3 		edit 		4
-------------------------------------
4 		delete 		8
-------------------------------------
Соответственно суммурные ранги в интервале 0 - 15.
По поводу достаточности 32 значений для кодировки действий.
Скорее всего при значительном списке действий над объектами
предметной области, станет вопрос о какой-то их группировке,
появлении иерархии действий, т.е. придется вносить изменение 
в схему БД. Можно будет сделать по-простому:

  permissions(   roleid , doingid , boolean flag) - 
это повлечет небольшое изменение в одном методе класса 
Db_permissions .
 
Сейчас обошлись 4 значениями из 32 возможных. 
По той задаче, которая решалась сейчас этого достаточно.

Два других ваших замечаний касаются общих вопросов.

Они связаны между собой. Звучат они так: 
1.много кода ; 2. много повторяющегося кода.
Т.к. никаких конкретных фрагментов вы не указали, то
я воспринимаю это скорее как ваше впечатление.  
Много кода надо понимать так: 1. есть избыточные (не несущие 
функциональности) модули, классы, функции ; 2. повторяющийся код.

По избыточности могу сказать, что я её не вижу. 
По повторяемости кода. У меня есть 2 фрагмента строк по 15-20
с совершенно одинаковой функцией. Убрать механически я не хочу.
Надо сделать какое-то обобщение, что бы это выглядело естественно.
Других таких фрагментов я не нашел .

   Сейчас полностью реализовал модель объект - роль субъекта - действие.

   Например, пользователь может добавить статью ( при этом он становится
её владельцем). теперь как владелец имеет право выбирать темы-рубрики,
к которым относится статья, менять её заголовок, удалять статью.
Администратор может только удалить статью. То же касается и комментариев.



  Последнее. Целью курса было построение того, что вы назвали мини-фреймворком
на базе тех принципов и технологий, которые изложены в курсе.

  Теперь я должен показать, что следовал той же методе.

-   MVC - это основной базовый принцип.
-   отсутствие обратных ссылок, т.е. управление передается строго 
    в одном направлении :
    index -> router -> controller -> viewDriver      ->     html
      ^                   | ^             ^                   |
      |                   V |             |                   |
      |                  model        viewComponent           |
      |   (_POST, _GET)                                       |
      --------------------------------------------------------- 
 


 -   Котроллеры сделаны по принципу: котроллер  < - > страница html.
     Контроллеры наследуют от базового класса Cnt_base. Никаких
     дополнительных методов по отношению к базовому классу не имеют.

 -   Модели. У контроллера есть модель - класс в который через конроллер 
     передаются данные от html и формируются новые для нового вывода.
     Модели выполнены двухуровневыми. Первый уровень взаимодействие
     с контроллером. Второй - взаимодействие с БД через запросы.   

 -   Представления - это совокупность шаблонов страниц, задающих
     расположение фрагментов, и файлов, содержащих эти фрагменты.
     Соответствие шаблонов и фрагментов задаёся специальной частью
     контроллера (объекты класса Cnt_vw_{имя} ). Из этой информации
     ViewDriver строит дерево компонентов и формирует страницу html.

      Для анализа и контроля дерева компонентов сделана утилита:

      http://www.mnudelman.16mb.com/php-2/articles/utils/testViewComponents.php


     Чтобы это назвать фреймворком нужна последовательность шагов по развитию
    проекта или создания нового.
      Вот эти шаги:
     1. определяем содержимое  формируемой html страницы
     2. контроллер для обработки данных страницы.
        в простейшем виде (например, задавая константы, вместо обращения к модели)
        строим класс Cnt_vw_{имя} для формирования вывода.
     3. Простой шаблон для ввода/вывода информации      .
     4. Строим модель  - сначала без уровня БД)
     
       Повторяя в цикле шаги, добиваемся нужного результата.
     На мой вкус начинать надо с проектирования схемы БД. Я считаю это очень важной
     частью работы, и делаю ее всегда руками в тексте. начальную генерацию 
     и последующее изменения, а так же проверки запросов, певичное заполнение таблиц
     выполняю утилитой 

     http://www.mnudelman.16mb.com/php-2/articles/utils/sqlExecute.php


     Для себя я смогу все это использовать. Была бы потребность.
     Для других буду только рад если кто-то заинтересуется .


все вместе можно посмотреть на

http://www.mnudelman.16mb.com/php-2/articles

тексты : https://github.com/mnudelman/php-2-articles.git

Нудельман Михаил.

PS. По поводу курса. Мне кажется нет смысла тянуть бодягу
от mysql_ к mysqli_ и только потом PDO. Мне кажется сразу можно
переходить к PDO  без всякого ООП. Я начал использовать PDO 
задолго до того как написал первый класс. это даст какую-то
экономию на другие полезные вещи. Например, начать сразу изложение в
объектной форме. Ведь к вам попадают люди после PHP-1.
В целом все было нормально.
Замечания, которые вы делали, мне очень помогали. 
Желаю успехов.  

